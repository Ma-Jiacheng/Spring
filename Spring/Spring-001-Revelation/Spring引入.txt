1. OCP
    * 什么是OCP？
        OCP是软件开发七大原则中最基本的原则，开闭原则
        O指Open，对拓展开放。C值Close，对修改关闭

    * OCP原则是最核心的，最基本的，其他的六个原则都是为这个原则服务的

    * OCP开闭原则的核心是什么？
        只要在拓展系统功能的时候，没有修改之前写好的代码，那就是符合OCP原则的
        反之，如果在拓展系统功能的时候，修改了之前的代码，那么这个设计就是失败的，违背OCP原则

    * 当进行系统功能拓展的时候，如果修改了之前稳定的程序，之前的所有程序都需要进行重新测试，这是不想看到的，非常麻烦

2. 依赖倒置原则（DIP）
    * 什么是依赖倒置原则？
        以本节代码为例，UserAction依赖具体的UserServiceImpl，UserServiceImpl依赖具体的UserDaoImplForMySQL
        该代码是上层依赖下层的，凡是上层依赖下层的，都违背了依赖倒置原则。上层不在依赖下层，表示符合依赖倒置原则

    * 依赖倒置原则的核心是什么？
        倡导面向接口编程、面向抽象编程、不要面向具体编程

    * 依赖倒置原则的目的？
        降低程序耦合度，提高拓展能力

3.当前程序的设计显然违背OCP，也违背DIP，需要怎么修改？
    * 可以采用“控制反转”思想解决这个问题

4. 控制反转（IoC）
    * 控制反转：IoC（Inversion of Control）

    * 反转是什么？
        在程序中不在采用硬编码的方式来new创建对象（将new创建对象的权力交出去）
        在程序中不在采用硬编码的方式来维护对象关系（将维护对象间关系的权力交出去）

5. Spring框架
    * Spring框架实现了“控制反转（IoC）“这种思想
        Spring框架可以帮助创建对象
        Spring框架可以帮助维护对象和对象之间的关系

    * Spring是一个实现了“控制反转”思想的容器

    * 控制反转的实现方式有多种，其中必要重要的叫做”依赖注入（Dependency Injection，简称DI）”
        依赖注入包括常见的两种方式：
            第一种：set注入，执行set方法给属性赋值
            第二种：构造方法注入，执行构造方法给属性赋值
